see below string member function called length alias size class want exclusively use **size ** version length text string member function find returns -1 target found *this partly true!* returns special number called npos cast integer -1 **only** correct way test whether find found target string compare return value special value npos tell compiler find definition npos write `string npos` ``` word find target != string npos target found word find target == string npos target found ``` vector \array built-in functions protection\" very similar string effect vector chars using \"raw\" arrays course vectors simplify things told always use reference parameters vectors strings; text more nuanced correctly vectors strings known small use value parameters correct ignore continue use reference parameters vectors strings still understand use const modifier reference parameters rely bool type; need aware integer used \boolean context\" true false value expected used boolean context zero represents false nonzero integer represents true one reason become comfortable lot programs out rely convention especially operating system code see discussion below explains use break statement happens omitted mentioned above need comfortable use integers boolean context one important features clue interface use course provision tutorials error messages produced program compiled addition system checks \novice errors\" typically caught compiler occur inexperienced programmer's code use c99 standard course number c99 features avoid currently taking soon take computer organization course course provides much deeper coverage topics mentioned next section included math program compile command include \switch\" -lm example gcc -wall -lm populationgrowth c" correction statement feof reading last byte file cause feof return happen try read byte past end file correction table structname cpp structname suffix cpp c++ files arc 35 students instructors provide deadlines completing each section's activities week 1- week assignments due sunday 11pm week assignments due friday september 12th 8am week 1-1 week 1- week assignments due sunday 11pm week assignments due friday september 12th 8am week 1-2 10 week 1- week assignments due sunday 11pm week assignments due friday september 12th 8am week 1-3 week 1- week assignments due sunday 11pm week assignments due friday september 12th 8am week 1-4 don't forget choose section section 701 rosalia cueto 710 jose villa don't forget choose section section 701 rosalia cueto 710 jose villa don't forget choose section section 701 rosalia cueto 710 jose villa don't forget choose section section 701 rosalia cueto 710 jose villa don't forget choose section section 701 rosalia cueto 710 jose villa don't forget choose section section 701 rosalia cueto 710 jose villa arc 35 students instructors provide deadlines completing each section's activities week 1- week assignments due sunday 11pm week assignments due friday september 12th 8am week 1-5 arc 35 students instructors provide deadlines completing each section's activities week 1- week assignments due sunday 11pm week assignments due friday september 12th 8am week 1-6 arc 35 students instructors provide deadlines completing each section's activities week assignments due friday september 12th 8am week 1-7 12 really important -- focus please hw #1 due monday welcome class! see kirby 1c algorithms want take look sections 10 10 provide little more background pointers pass pointer provides one way multiple values back function having function return struct section cleanest way return multiple values section mentions strings cover detail chapter don't stress activity items activity item scanf uses '&' front variables reading discuss section now remember use '&' using scanf -- don't program crash give very strange result! pointer file same syntax pointer data type more pointers found chapter 10 chapter tells need pointers use external files input output uses equal sign assignment operator very different equal sign used math classes equal sign means store value right side variable left side possible write programs without using assignment operator programming functional programming style usually relies heavily recursion chapter mathematicians favor functional programming class focus teaching traditional imperative style programming languages more commonly used engineering kiss need put ``` #include <stdbool h> ``` line beginning file order use bool data type need define bool data type ignore figure ``` #include ``` explained detail 13 wikipedia great page various libraries include programs see [c standard libraries] http en wikipedia org wiki c_standard_library version compilers problems printing out %lf format printf use %g instead print out doubles sure always use %lf reading scanf double keyboard printf scanf lets use %d %i format integer zyante use %d correct programs ame 2402!! pretty much programs need print out programmers name ouid print out short explanation program prompt user print statement whenever user needs supply input program properly commented described section note activity look code carefully demonstrates happens common typo remember compare whether something false something true output formatting work %g practice output formatting use %f ensure compatibility windows allow %lf output suggest making hard copy table we'll using relationships quite bit cover up section -- please review up problem complete sunday august 24 11 59 complete sunday august 24 11 59 complete sunday august 24 11 59 complete sunday august 24 11 59 complete sunday august 24 11 59 complete sunday august 24 11 59 due august 31 11 55 due 21 due 21 due 21 due 21 due 21 due 21 due 21 due 21 due 28 due 28 due 28 due 28 due oct due oct due 10 26 due 10 26 due 10 26 due 10 26 due nov due nov due nov due nov due november 16 due november 16 due november 16 due november 16 due november 23 due november 23 due november 23 due november 23 cover 1-2 12 17 execution assignment statement right left construct assignment uses \=\" checking whether two variables same value uses \"==\" identified appropriately activity very important keep mind variable names both \valid\" \"meaningful\" important understand \when operands integers division operator performs integer division throwing away remainder \" important table precedence rules arithmetic operators homework activity good example using cover up 12 17 chapter variable \named\" \"object\" \"memory\" integer contain max 32 bits keep mind long information want represent floating point numbers use double it's bad practice always using \int\" variables implicit conversion dangerous! 12 12 important understand cin reads characters up next whitespace enter don't cover 12 activity important challenge homework think determine number odd even? figure activity critical multiple branches represents multiple ranges ranges overlap each therefore one branch executed different multiple statements figure study activity \nested\" statement switch work string double important understand infinite loop occurs cover enumerations interested please study yourself need help please know cover 10 enumerations interested please study yourself need help please know always keep mind array vector indices range n-1 total number elements stored array vector typical way initializing vector elements 0; num_elements; ++i cout << \value \"; cin >> uservals common error try access vector index out vector's index range try access v's valid indices 0-7 vector's current size accessed using function vctr size typical way increase size resize size +1 one important practice avoid errors use \push_back\" initialize vector instead vector<int> v; empty push_back correct 3; wrong" section section 10 covered section required class required covered csci 41 global variables used sparingly function declaration allows function definition appear later file section required come back finishing pointers characters surrounding filename determine preprocessor looks file important construct 17 header file guards section required cover sections revisit more sections csci 41 cover sections brief understanding sufficient specifically cover string covered chapter figure important sections covered chapter 10 covered test markdown *hi* **hi** sections links additional notes examples area sections link homework assignment assignment due __next__ class section actually discusses section's [homework] http www svsu edu ~jhlavace math300 hw 1_1 html section's [homework] http www svsu edu ~jhlavace math300 hw 1_2 html section's [homework] http www svsu edu ~jhlavace math300 hw 1_3 html notes [predicates] http www svsu edu ~jhlavace math300 notes predicates html [homework] http www svsu edu ~jhlavace math300 hw 1_5 html section [solutions] http www svsu edu ~jhlavace math300 solutions w2_solutions html class work sections [homework] http www svsu edu ~jhlavace math300 hw 1_4 html section [solutions] http www svsu edu ~jhlavace math300 solutions w2_solutions html class work sections [additional notes] http www svsu edu ~jhlavace math300 notes logical_equivalence html logical equivalence laws logic [homework] http www svsu edu ~jhlavace math300 hw 1_6 html section [solutions] http www svsu edu ~jhlavace math300 solutions w2_solutions html class work sections table rules inference page little bit confusing partially formatting partially last rule _resolution_ written different way rest rules somewhat beter table available [here] http www svsu edu ~jhlavace math300 notes rules_of_inference html look [few more examples] http www svsu edu ~jhlavace math300 notes inference_examples html verifying argument validity additional [notes] http www svsu edu ~jhlavace math300 notes proofs_of_conditionals html proofs [homework] http www svsu edu ~jhlavace math300 hw 2_1 html section few additional [notes] http www svsu edu ~jhlavace math300 notes sets_and_subsets html [homework] http www svsu edu ~jhlavace math300 hw 2_2 html section due tuesday few additional [notes] http www svsu edu ~jhlavace math300 notes set_operations html [notes] http www svsu edu ~jhlavace math300 notes cartesian_product html section [homework] http www svsu edu ~jhlavace math300 hw 2_3 html section [homework] http www svsu edu ~jhlavace math300 hw 2_4 html section few notes examples concerning [proofs] http www svsu edu ~jhlavace math300 notes functions_and_proofs html [homework] http www svsu edu ~jhlavace math300 hw 3_1 html section homework section exercises text sufficient [homework] http www svsu edu ~jhlavace math300 hw 3_3 html section find notes section helpful [homework] http www svsu edu ~jhlavace math300 hw 4_1 html section [homework] http www svsu edu ~jhlavace math300 hw 5_1 html section [homework] http www svsu edu ~jhlavace math300 hw 5_2 html section [homework] http www svsu edu ~jhlavace math300 hw 5_3 html section [homework] http www svsu edu ~jhlavace math300 hw 9_3 html section [homework] http www svsu edu ~jhlavace math300 hw 9_6 html section due tuesday november 25 [homework] http www svsu edu ~jhlavace math300 hw 10_1 html section due tuesday november 25 keep calm carry output second program box narrow appear correctly lesson algorithms specifically language it's interesting fun really part syllabus similar result gotten using preprocessor statements example `#define speed_of_sound 761 207` note int optional declarations such unsigned x; unsigned int x; equivalent long long z; long long int z; equivalent questions require omit \int\" further information available pocket reference pp 79-87 following statement false programmer add `#include <stdbool h>` use strcmp read programmer add `#include <string h>` use strcmp we're jumping gun introducing arrays before arrays chapter 10 contains error find it? chapter uses common combination typedef declaration struct declaration typedef defines new type name existing type material uses combination exclusively discuss typedef declarations separately cs 49c material introduces structs first typedef later students notice differences way struct declarations done aware typedef necessary part struct declaration please note different way declare java use wing ide already installed lab computers see moodle more details install wing ide personal machine section full great vocabulary know computer scientist stress over processor instructions sections 11 11 read section before 10 21 check out cool resource youtube com remember thhtehioweht set ast [google] https www google com hjhjhjj optional section optional required required required required required optional optional required optional optional optional required required required floating-point vs integer see differences num1 num2 num3= num4 required required required optional required recommended import math function call argument optional recommended required required required optional required required required required required required recommended optional optional required required required required required required required required required required due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due 11 before lecture due 11 before lecture due 11 before lecture due 11 before lecture due 11 before lecture due 11 before lecture due 11 before lecture due 11 before lecture due 16 before lecture due 16 before lecture due 16 before lecture due 16 before lecture due 16 before lecture due 16 before lecture due 16 before lecture due 16 before lecture due 18 before lecture due 18 before lecture due 18 before lecture due 18 before lecture due 18 before lecture completed 23 before class completed 23 before class completed 23 before class completed 23 before class 25 before during class 30 before during class 30 before class 30 before class 30 before class 30 before class due oct before class due oct before class due oct before class due oct before class due oct before class due oct before class due oct before class due 10 before lecture due 10 23 before class due 10 23 before class due 10 23 before class due 10 23 before class due 10 23 before class due 10 28 class hour due 10 28 class hour due 10 28 class hour due 10 28 class hour due 10 28 class hour due 10 30 before class due 10 30 before class due 10 30 before class due 10 30 before class due 11 before class due 11 before class due 11 13 before class due 11 13 before class due 11 13 before class due 11 13 before class due 11 13 before class due 11 18 before class due 11 18 before class due 11 18 before class due 11 18 before class due 11 18 before class due 11 20 class due 11 20 class due 11 20 class due 11 20 class due 11 20 class due 11 20 class coding statements generally declare loop variable part statement prefer form i++ ++i used textbook example write loop activity int 0; <= 99; i++ follow style section optional section optional section optional section optional section optional section optional students found overly complex section optional section information useful don't expect remember details seeing help know go more information section optional section optional section optional section optional section optional section optional table explanation existential generalization something \if true specific member domain exists such true \"" please answer perform actions answer questions listed \activity\" boxes section ignore activities \"try\" boxes please answer perform actions answer questions listed \activity\" boxes section ignore activities \"try\" boxes please answer perform actions answer questions listed \try\" boxes please answer perform actions answer questions listed \activity\" boxes section ignore activities \"try\" boxes please answer perform actions answer questions listed \activity\" \"try\" boxes section complete activity questions page complete activity questions page complete activity questions page complete activity questions page complete activity questions 1-2 page complete activity questions page complete activity questions page complete activity questions page answer activity questions page answer activity questions \try 2\" page answer activity questions \try 1\" \"try 2\" page answer activity questions \try 1\" \"try 2\" page answer activity questions \try 2\" page answer activity questions \try 1\" page answer activity questions \try 1\" page answer activity questions page answer activity questions \try 1\" page activity sections page activity sections page activity sections page activity sections page activity sections page activity sections page activity sections page answer activity questions page answer activity questions try answer activity questions page answer activity questions page answer activity questions page answer activity questions page answer activity questions page addition specify number decimals floating point number use conversion specifier xf replaced number decimals want example write 2f number written decimals convenient writing dollar amount note last paragraph chapter that's exactly want give arrays vectors strings variables initial values before using compile separate files linux server need -bash-4 1$ g++ rationalmain cpp -i rational cpp example first file one containing main function option \-i \" character capital note period character follows lets compiler find rational cpp file current directory class consider stack adt adt holds items supports main operations pushing popping items stack testing whether stack empty full complete activities complete activities 11 complete activity complete activities complete activity complete activity subsection optional grading purposes try out exercises test knowledge chapter subsection optional grading purposes try out exercises test knowledge chapter subsection optional grading purposes read through focusing explanation syntax random method cover random class week skip subsection week week subsection optional grading purposes try out exercises test knowledge chapter cover string class week skip subsection week week cover string class week skip subsection week week cover string class week skip subsection week week cover character class week skip subsection week week subsection optional grading purposes try out exercises test knowledge chapter subsection optional grading purposes subsection optional grading purposes try out exercises test knowledge chapter discuss arrays week subsection optional grading purposes read through focusing explanation concept developing programs incrementally subsection optional grading purposes read through focusing explanation concept unit testing discuss arrays week skip subsection week week subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes read through focusing explanation concept unit testing discuss arraylist week skip subsection week week discuss arraylist week skip subsection week week subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes read through better understanding system out subsection optional grading purposes read through better understanding system done week whole chapter optional grading purposes read through better understanding memory management discuss abstract class week 11 skip subsection week week 11 concept adt used 14 want read week before working 14 subsection optional grading purposes discuss arrays week skip subsection week week subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes subsection optional grading purposes extra need show math formula numones amounttochange numfives 5; note doing activities require code click 'run' make changes clicked 'run' sure click edit window before pressing back-space key change text don't click edit window first take back previous window browser clicking 'back' button section refers \cout construct\" \"cout statements\" learn cout actually name stream object statements cout first leftmost symbol actually expression statements using insertion operator \"<<\" cout being operand therefore more appropriate call insertion statements logical operators written english names people find clearer && || purposes considered stylistically fine use postfix versions increment ++ decrement -- standalone expression definitely advised use kind assignment within more complex expression mostly entirely repeat sec vectors substituted c++ native arrays text refers global constants \variables\" really misnomer identifier introduced const declaration vary therefore variable authors suggest minimizing use non-const globals style guide prohibits categorically nevertheless important understand work \constant variable\" oxymoron named entity vary variable class use term \"constant\" identifier declared const cover \operator<<\" notation turn objects classes midterm stated here recommended member variables private even though allowed public make sense private member functions well public ones examples section somewhat artificial quite easy avoid name conflict between parameters private member note section somewhat out order pointers covered until ch section seems exact copy previous one disagree statement here 2-d arrays typically preferred 2-d vectors discuss 2-d vectors class contrary definition below sum matrix produce vector each element sum corresponding column sum elements array need column vector form example arr array dimension use sum arr sum elements section required using eclipse pydev find instructions configuring personal machine through moodle section required section required section required interesting won't covered class interesting unnecessary introductory course section required section required interesting required know docstrings required complete activities useful reference learning outcome helpful reference useful required useful required potentially very useful won't test here updated instructions obtain rims use ecen 330 fall 2014 wish go http www cs ucr edu ~vahid pes ritools download tools use license key activate simulator kn33-s2r9-j2a2-wf8e-q33d-g3dm-waab key valid months reading pages homework make sure understand expression built up smaller parts www google com adding notes arc 35 students instructors provide deadlines completing each section's activities week 1- week assignments due sunday 11pm week assignments due friday 8am week 1-1 week 1- week assignments due sunday 11pm week assignments due friday 8am week 1-2 10 week 1- week assignments due sunday 11pm week assignments due friday 8am week 1-3 week 1- week assignments due sunday 11pm week assignments due friday 8am week 1-4 week 1- week assignments due sunday 11pm week assignments due friday 8am week 1-5 week 1- week assignments due sunday 11pm week assignments due friday 8am week 1-6 week assignments due friday 8am week 1-7 10 <iframe width=\500\" height=\"281\" src=\" www youtube com embed e1azcfha5v8?rel=0\" frameborder=\"0\" allowfullscreen>< iframe>" <a target=\_self\" href=\"https cms psu edu section content default asp?wci=pgdisplay&amp;wcu=crscnt&amp;entry_id=febd1374e7464f518a2b92c5ced4bdfc\"><img class=\"largeicon cmdefaulticon\" src=\"https cms psu edu images icons iconfile gif\" style=\"vertical-align text-bottom\" border=\"0\" alt=\"file\" title=\"file\"><img src=\"https cms psu edu images misc whitespace gif\" alt=\"file\" title=\"file\" border=\"0\" class=\"iconoverlay\">10 31< a> <p> <a target=\"_self\" href=\"https cms psu edu section content default asp?wci=pgdisplay&amp;wcu=crscnt&amp;entry_id=febd1374e7464f518a2b92c5ced4bdfc\"><img class=\"largeicon cmdefaulticon\" src=\"https cms psu edu images icons iconfile gif\" style=\"vertical-align text-bottom\" border=\"0\" alt=\"file\" title=\"file\"><img src=\"https cms psu edu images misc whitespace gif\" alt=\"file\" title=\"file\" border=\"0\" class=\"iconoverlay\">10 31< a>" easter egg try entering \another number\" literally activity answer? think same result working real c++ session?" current array index starting soon change correct starting index watch out reichelson grading everything make sure reading text before answering questions wrong answers asking hints lower score partial credit wrong answer try again until correct book downloads time use score viewed cartoons java needed run book home use example list temperatures week month year decade etc discuss concept stale data use calcarea example triangle program assignment read \slightly different\"" find more information onto surjective one-to-one injective following link [khan academy video onto one-to-one] https www khanacademy org math linear-algebra matrix_transformations inverse_transformations surjective-onto-and-injective-one-to-one-functions activity composition relations composition making list here process list point-to-point paths list point-to-point paths start pairs see continuation path yields continue yields yields yields continue therefore composition struggling graph activity use same reasoning content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic earlier course covered paths walks cycles require go through material content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic content goes beyond scope course assessed section; feel free go through content interest topic according recent surveys professional embedded system developers ~65% code write written language ~20% written c++ ~5% written assembly language [see http embedded com embedded market study] section describe use stubs allow debugging calling function before fully functional child functions example helpful added lecture more graphic methods <b>numberformat< b> useful object displays floating point numbers currency format object instantiated new operator <br><code><br>import java util numberformat;<br><br>numberformat fmt numberformat getcurrencyinstance <br>double price 45211; <br>system out println fmt format price ;<br><br><b>$3 45<b> another term creating object <em><b>instantiating< b>< em> object new operator instantiates object class special accessor method called <code>tostring code> creates string representation object suitable displaying using <code> system out print code> method signature following <br><br> <code>public string tostring code><br><br> example student class include <br><br> <code>public string tostring {<br> string str first \" last \" id \" id;<br> return str;<br> }< code> header file stdlib included test please note due 010101 url http www google com favor print instead file write example ```python my_file open 'test txt' 'w' print \hello world!\" file=my__file my_file close ```" practice notes program called \code\"" tips important see slides 65-79 issue hi complete activity section test example note haven't covered arrays vectors focus performance discussion understanding raw details vectors arrays note class essentially same thing struct print hex use cout << std hex; print decimal use cout << std dec; need #include &lt;iomanip&gt; printing uint8_t values print characters instead numbers avoid use uint8_t 20; cout << +x; jumpheight=19; **example** students please remember part goes here? first class hello students www ferris edu hi hey take look print [i'm inline-style link] https www google com cvfgxhgfgsdfasdfasfasdfasdfasdfas floating point type use course double use float type correct definition \positive\" greater definition given here \"non-negative\" study two's-complement representation negative numbers computer organization course use c99 standard course more program compilation later learn great deal more components computer computer organization course write assembly language programs course sometime soon send error warning messages generated compiler module produces tutorials messages insert printf statement debugging purposes always follow statement fflush stdout explanation later compiling programs use functions math add -lm compile command preferably end text below argument using constant seed random number generator developing testing code running simulation repeatedly gathering information distribution values want use constant seed due jan 15 before class due jan 15 before class due jan 15 before class due jan 15 before class due jan 15 before class due jan 15 before class due jan 15 before class done during class jan 15 due jan 15 before class due jan 15 before class due jan 15 before class due jan 20 before class due jan 20 before class due jan 20 before class due jan 20 before class due jan 20 before class due jan 20 before class done during class jan 20 due jan 22 before class due jan 22 before class due jan 22 before class due jan 22 before class due jan 22 before class due jan 22 before class due jan 22 before class due jan 22 before class due jan 27 before class due jan 27 before class done during class jan 27 due jan 27 before class due jan 27 before class due jan 27 before class due jan 27 before class due jan 27 before class due jan 29 before class due jan 29 before class due jan 29 before class due jan 29 before class due jan 29 before class due apr 14 before class due apr 14 before class due apr 14 before class due feb before class due feb before class due feb before class due feb before class due feb before class due feb 10 before class due feb 10 before class due feb 10 before class due feb 10 before class due feb 12 before class done during class jan 29 done during class feb 12 next assignment chapter see chapter due before class due 19 before class due 19 before class due 19 before class due 19 before class due 24 before class due 24 before class due 24 before class due 24 before class due later study chapter due 17 before class next due 24 before class due 26 before class due 26 before class due 26 before class due 26 before class next chapter chapter due before class due before class due before class due before class due before class due before class next section chapter due 17 before class due 24 before class due 24 before class due 31 before lecture due 31 before lecture due 31 before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due before lecture due 23 before class due 23 before class due 23 before class due 23 before class chapter optional helps understand memory management great day porcupine walking activity good practice working floats activity optional meaning try variations full credit effort keep things simple focus strings int's float's learn more lists tuples cover arrays want learn more dict data type check out chapter 10 activity don't worry don't know answers little confused answers once learn lists much make sense challenge homework activity overwhelmed zyante's use dictionary don't need know point use dict data type more importantly need pay attention indenting exercise more fix indenting use dict data type therefore simply re-type code fix indenting activity calculating factorial suggest research factorial equation reason loop construct makes sense due nature equation look provided see equation requires counter loop makes sense don't keep typing etc additionally testing know provided test data unclear program needs input instance value output equation correct value 120 loops used conjunction python's list tuple dictionary datatypes formally covered datatypes please listen screen cast python loops help better understand activities challenge homework assignments chapter help completing challenge homework 10 remember strings array list characters wanted isolate letter variable mystring listed below look following mystring 'python' lettertlocation mystring[2] [2] index value indexes start additionally want find out length string len function example lengthofmystring len mystring lengthofmystring completing assignment need use loop consider loop go around length string simonpattern match between simonpattern userpattern user score increments otherwise program stops challenge homework assignment need know parameter sort method order reverse order sort need type my_list sort reverse=true 'parameter' sort method allows list sorted reverse order true boolean value challenge homework question zybook picky spacing you'll want use \annual pay \" \"annual pay\" see small space end pay thats inside quotes reference division java both operands integers remainder thrown away evaluate one operands decimal number result decimal number evaluate skipped section enumerate help following examples end section please see section 12 skip activity 14 skip 12 check out example instead [gradebook py] http 1drv ms 1wd0soy chapter write code style adam uses print write files ```python my_file open 'file txt' 'w' print \hello world!\" file=my_file ```" previous programming courses cis 111 211 already covered many basic programming concepts concepts mostly same java visual basics python syntax differs through first chapters mostly discuss differences between python java syntax few more conceptual differences practice using java syntax problems using already known programming concepts good reference listing differences found http anh cs luc edu 331 notes javavspython html java object-oriented code included classes first program contain one class going create objects bulk code included method called main header shown activity programs include always following piece code public class classname public static void main string[] args code note textbook method main always end statement return; statement omitted always omit exercises textbook require major difference between python java python dynamically typed language java mostly statically typed explain \mostly\" chapter inheritance right now think java being statically typed mean? python declare type variable declared type defined value stored variable type change value different type stored variable java declare type variable first defining type variable change once declared static example python height 50 java int height 50;" java one symbol division both operands integers result integer one operand double result double example gives gives section covers one important difference python type int java type int recall python int large want java programming languages int fixed range content variable integer outside range use type long type fixed range need number outside range long integers yo use double use precision number significant digits same relational operators java python java \chain\" relational operators 0<=x<= valid python syntax invalid java see section express relation main difference java vs python multiple i-else branches use \else if; instead \"elif\" learn java logical operators && || loop java distinctive syntax compared python functions differently mostly different ways express counting loop initialization variable condition variable update expressed one statement top loop type loop allow iterate through list python loop arrays lot common python lists especially same purpose storing list related data use very similar syntax indices arrays java few limitations compared lists python elements array same data type slightly weaken assertion studying inheritance once created number elements array fixed arrays methods use negative indexing java concept method same java python chapter methods really work python functions really linked objects starting chapter java method similar python method still write code class contains method main used create object method main declared static means method called without object being created python methods always return value explicit value returned return statement value \none\" returned method return several values method header python indicate whether value returned java header method include return type before name method void value returned method ends return; without return statement data type return value int string boolean return type void value correct type returned java method return one value use parameters same python java one difference variables data type parameters defined method definition topic method overloading new exist python method overloading allows methods sharing same name defined different parameter lists different parameter list mean list data types different keeping same parameter types different parameter names count note methods same name same return type many computers called solid state disk ssd called disk prefer solid state secondary storage ssd unlike true disk drive moving parts more memory ram usually slower changed blocks byte word present time degrades use referring figure 10 this? make more sense reading section 11 scope resolution briefly accessing assigning variable python try find variable's object global assigning variable value python assumes local already use make new object unless variable declared global case python use global variable introduced declaring main program function called main force declare global variables outside scope functions including main* way use global variables done explicitly good reason note construct \unpacking\" apply functions multiple ouputs return values assignments general example try following code tuple \"bob\" 99 name amount print name amount same list processing strings powerful intrinsic feature python much processing involves manipulating string data example reformatting data files data input various programs packages being valuable work provides skill valuable others applies disciplines stem fact argue more valuable disciplines example work corpus linguistics english department making excellent use string manipulation much computing involve solving math science problems now seen user input file processing see more usefulness techniques read files large numbers data points follow webpage reasonably good overview view object http stackoverflow com questions 8957750 what-are-python-dictionary-view-objects check out return value activity 10 understand find statement text horstmann necaise insightful \the call pattern recursive function looks complicated key successful design <em> think em>\" found takes practice experience reading recursive solutions understanding relationship between recursion inductive proofs helpful csi cisw 125 students setting up development environment complicated first thing you'll need order complete projects class please refer development environment section corresponding blackboard class detailed instructions help set up environment please note challenge print statements default end new line depending approach fact help complete exercise something keep mind though there's more one way complete one way completing uses one print statement stuck challenge make sure go back review math operator table make sure division operator you're using deliver correct results exercise 17 involves doing algebra right answer keeping i've far class i'm going give formula need derive part gas equation pv=nrt equation need use parts need solve algebraically resulting equation nrt need implement code want read section following section definitely concentrate fundamentals beginning section part first few parts section much more important beginning programming experience want read section preceding section definitely concentrate fundamentals beginning section part first few parts section much more important beginning programming experience arc 35 students instructor provide deadlines completing each section's activities week 1- week assignments due sunday 11pm week assignments due friday 8am week 1-1 \load\" functionality referred \"enable \" flip-flop enable load register one samples input enable load input high \e\" input clk signal labeled \"clock\" \"clk \"" addition being used simulation another key use hdls implement create actual circuits circuits realized implementing reconfigurable chip fpga fabricating custom chip lab use hdls both simulation implementation gives good general overview structure basic verilog module class approach implementing basic combinational functions slightly differently going recommend writing code slightly different way instead placing pieces fsm single always block use separate always blocks groups assign statements next state logic output logic state registers help avoid potential urge combine different pieces same portion hdl concerned last few activities suggest using syntax hlsms long clear meaning symbols used fine \markdown content\"" part graded here hit run once! part graded here hit run once! part graded here hit run once! note put int example work wrong we'll cover class instead you'll need click \run\" points section" don't care book explains section java *always* pass value arrays classes objects coming couple weeks stored reference address mentioned class http stackoverflow com questions 40480 is-java-pass-by-reference-or-pass-by-value good writeup mistake table 10 isspace examples accidentally use isalpha instead isspace jk;jk;lj; pay special section chapter basic ideas computers matlab came understanding matlab run many different types computers still look same jhs note comments help understand code comments important write code two distinct ways take minute try think those two different uses comments functions available matlab time open up one great powers matlab hundreds build-in functions use don't think table below something try memorize table common trig functions matlab includes one common operations matlab program builder use matlab help look up matlab names functions arguments function requires spend time later upcoming week more familiar matlab help \math functions\" matlab special case broader category \"inbuilt functions\" built functions user-defined functions concept difference built-in functions makers matlab put environment user-defined functions construct yourself section further exercise user defined functions another name \user defined function\" \"custom function\" hear both terms used mean same concept function user write custom environment short chapter find great deal very useful information basics now build matlab function deal computation given inputs supply give back results outputs computation including flow charting widely used current methodology \"incremental programming\" put idea firmly mind inputs function outputs function implies steps take first sit down design function implement programing best thought two steps design implement programming fact distinctly engineering activity! first step design sure understand inputs send function outputs come back function don't firm target programming engineering task hit target!!t second step design framework implementation framework use point forward 1101 \incremental programming\" over years many frameworks proposed help programmers below find authors zybook one early step \"write script\" note read go quickly \"encapsulating script function 1101 skipped step using script end term understand chapter ends example focused \"green monster\" fenway park boston example shows steps designing implementing starting given problem green monster ending working program solves problem suggestion read chapter once quickly bigpicture go back read details lot \"meat\" writing finally read chapter things unfamiliar code figure lines initially understand covered worry specifics here flow work important idea develop code incrementally application chemistry chemical engineering example store molecular weight elements *antoine* constants different substances <table cellpadding \10\" style=\"border solid black 1px\"> <caption> antoine constants log10 c+t <tr style=\"color white;background-color green\"><th>substance< th><th>a< th><th>b< th><th>c< th><tr> <tr><td>acetone< td><td>7 63130< td><td>1566 69< td><td>273 419< td><tr> <tr><td>ethanol< td><td>8 11220< td><td>1592 864< td><td>226 184< td><tr> table> topic called regression curve fitting linearization discuss actual nonlinear regression later challenge homework activity optional sdbsfbsfbfb **stuff** [google] google com note code provided tree operations here actually pseudocode need convert wish use program -- love programming www youtube com feel free skim discussion sample processor instructions basically table through activity please animations activity though receive 100% completion zybook \indented spaces\" use spaces csci 261 please read break continue two activities skip challenge problem until monday technically buffer discussed section array covered now assume buffer first-in-first-out black box expected know details provided section esp activity skim figure 10 cover vectors class activity 10 replace 'vector' 'string' mind skip activity 10 challenge homework activity 10 details herein header guards optional material including activity 17 skip discussion c_str function visual studio version 2013 now allows c++ string used open command specifically skip text \the infs open str function string parameter str string \" figure <iframe width=\500\" height=\"281\" src=\" www youtube com embed videoseries?list=plttjbxrh72a1ytymns4_5ylurt1nvibpk\" frameborder=\"0\" allowfullscreen>< iframe>" <iframe width=\450\" height=\"231\" src=\" www youtube com embed rp78oh7agqg\" frameborder=\"0\" allowfullscreen>< iframe>" converting small large format integer processor right thing always uint8_t -1; 1111 1111 uint16_t a; 1111 1111 1111 1111 likewise converting large small format system attempt right thing lose try convert number small large magnitude fit small format \assert \" here used stand-in \"we want throw error\" working level tend way unless implement ourselves question zyante \"underflow\" correct answer -18 complete section preceding sections classtime thursday jan 22 classtime tuesday jan 27 complete sections through classtime tuesday jan 27 complete sections through finish through classtime thursday jan 29 finish through classtime thursday jan 29 complete through before class feb complete through before class feb section read before class thursady feb before class tuesday feb 10 read finish assignments before class tuesday feb 10 read finish assignments read section before class thursday feb 12 activities completed before class tuesday feb 17 read section complete assignments classtime tuesday feb 24 complete sections tuesday march 17 assignments complete sections tuesday march 17 assignments class time tuesday march 31 please complete sections zybook assignments class time tuesday march 31 please complete sections zybook assignments class time tuesday april please complete sections zybook assignments class time tuesday april please complete sections zybook assignments class time tuesday april please complete sections zybook assignments class time thursday april please complete sections zybook assignments class time tuesday april 14 complete sections zybooks assignments class time tuesday april 14 complete sections zybooks assignments class time tuesday april 14 complete sections zybooks assignments class time tuesday april 14 complete sections zybooks assignments tuesday april 28 read 4-10 zybooks assignments tuesday april 28 read 4-10 zybooks assignments tuesday april 28 read 4-10 zybooks assignments tuesday april 28 read 4-10 zybooks assignments tuesday april 28 read 4-10 zybooks assignments test [chech out] google [i'm inline-style link] https www google com [i'm inline-style link title] https www google com \google's homepage\" [i'm reference-style link][arbitrary case-insensitive reference text] [i'm relative reference repository file] blob master license [you use numbers reference-style link definitions][1] leave empty use [link text itself] text show reference links follow later [arbitrary case-insensitive reference text] https www mozilla org [1] http slashdot org [link text itself] http www reddit com blah blah blah here note here note notes [office hours] http www cse ohio-state edu ~wenger office-hours html see http important test don't forget links slides note go here locked until later quarter <style> section-content div instructor-content-container display none; style> locked until 19th <style> section-content div instructor-content-container display none; style> python namespace technical issues zybook please email support@zyante com homework due sunday 11 00 pm except last due friday 8am homework 1-1 due april technical issues zybook please email support@zyante com homework due sunday 11 00 pm except last due friday 8am homework 1-2 10 due april 12 technical issues zybook please email support@zyante com homework due sunday 11 00 pm except last due friday 8am homework 1-3 due april 19 technical issues zybook please email support@zyante com homework due sunday 11 00 pm except last due friday 8am homework 1-4 due april 26 technical issues zybook please email support@zyante com homework due sunday 11 00 pm except last due friday 8am homework 1-5 due technical issues zybook please email support@zyante com homework due sunday 11 00 pm except last due friday 8am homework 1-6 due 10 technical issues zybook please email support@zyante com homework due sunday 11 00 pm except last due friday 8am homework 1-7 10 due friday 15th 00am here instructor notes avoid using want know 14 2015 hello test testing comments testing out instructor note please see powerpoint slides lskjf lskjf lsdf lsjdflsdjkflsdf lksdjflsdjf lskjflksjdf [reddit] http www reddit com here slides testing notes section skipped necessary complete section testing add link something here [sample link itp] http itp usc edu reminder <b>homework< b> thet pay **careful** attention counting -- it's important! [see slides] http ww cs ucr edu note c++ main function different signature returns int value return value set zero program exited normally; codes symbolize error condition led program's end guess text section \cout\" c++'s version java's \"system out\" below equivalent java's system out print \"hello world\" cout << \"hello world\"; cin c++'s equivalent system though functions quite bit differently system scanner java it's designed precisely mirror c++'s cout semantics definitely advise using practice material section used difference see here c++ whitespace comments identical those java history lesson java came second designed comment structure c++ note phrasing here \many newer languages java strong c++ flavor \" java newer c++ explicitly designed resemble c++ many aspects much syntax learned cop 3502 directly apply c++ though definitely differences worth noting there's piece halfway down talking \conventions\" naming variables very good practice follow acclimated due tommorrow [link google] https www google com see course style guidelines document specific style usages follow pertinent distinctions use underscore separators naming variables functions lowercase camelcase sum_of_grades sumofgrades curly brackets begin line themlesves lines code exceed 80 characters notes http www css edu math methods previous section part java language -- already defined use call write methods whatever want! illumination read sections 1-1 before sunday 08 29 notes professor post reminders links class slides homeworks read mon **the zybook chapters sections still being reviewed cases reorganized ** students read complete participation exercises before lecture week complete chapter reading exercises before monday's lecture during week complete chapter reading exercises before monday's lecture during week note challenge exercises optional sections still read completed information valuable required reading week's lecture required complete exercise through ide required complete #1 #2 versions below asked write one more program information found canvas under assignment link programming practice set assignment canvas please make sure look under branching looping assignments specific instructions see link octal notes start early hw note students hi looks fun remember read! [i'm inline-style link] https www google com please complete section tonight sticks out here? sure sort new sequence un-sorted items show surrounding container each iteration specific sorting algorithm test best line up starting ending curly brackets improves overall readability code make sure placed curly brackets right location always indent inside curly bracket blocks! public comments ``` code test ``` effort keep things simple focus strings int's float's learn more lists tuples cover arrays want learn more dict data type check out chapter 10 activity don't worry don't know answers little confused answers once learn lists much make sense activity good practice working floats activity optional meaning try variations full credit challenge homework activity overwhelmed zyante's use dictionary don't need know point use dict data type more importantly need pay attention indenting exercise more fix indenting use dict data type therefore simply re-type code fix indenting activity calculating factorial suggest research factorial equation reason loop construct makes sense due nature equation look provided see equation requires counter loop makes sense don't keep typing etc additionally testing know provided test data unclear program needs input instance value output equation correct value 120 loops used conjunction python's list tuple dictionary datatypes formally covered datatypes please listen screen cast python loops help better understand activities challenge homework assignments chapter \help completing challenge homework 10 remember strings array list characters wanted isolate letter variable mystring listed below look following mystring 'python' lettertlocation mystring[2] [2] index value indexes start additionally want find out length string len function example lengthofmystring len mystring lengthofmystring completing assignment need use loop consider loop go around length string simonpattern match between simonpattern userpattern user score increments otherwise program stops \"" challenge homework assignment need know parameter sort method order reverse order sort need type my_list sort reverse=true 'parameter' sort method allows list sorted reverse order true boolean value due friday night see [powerpoint slides] http www cs ucr edu ~vahid test loop note note dr ted hey check out link material 